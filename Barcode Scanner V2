import cv2
from pyzbar.pyzbar import decode
import mysql.connector
from datetime import datetime

def main():
    # Database connection
    conn = mysql.connector.connect(
        host='localhost',
        user='root',
        password='Luke0716!',
        database='capstone'
    )
    cursor = conn.cursor()

    # SQL queries for checking and inserting barcode data
    check_query = "SELECT COUNT(*) FROM barcode_scans WHERE barcode_data = %s AND scan_time = %s"
    insert_query = """
    INSERT INTO barcode_scans (barcode_data, scan_time)
    VALUES (%s, %s)
    """

    # Open the camera
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Could not open video.")
        return

    while True:
        # Capture frame-by-frame
        ret, frame = cap.read()
        if not ret:
            print("Error: Could not read frame.")
            break

        # Decode barcodes in the frame
        barcodes = decode(frame)

        for barcode in barcodes:
            # Get the barcode data
            barcodedata = barcode.data.decode('utf-8')
            print(f"Detected barcode: {barcodedata}")

            # Get the current timestamp
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            # Check if barcode and timestamp combination already exists
            cursor.execute(check_query, (barcodedata, timestamp))
            exists = cursor.fetchone()[0] > 0

            if not exists:
                # Insert barcode data and timestamp if not duplicate
                cursor.execute(insert_query, (barcodedata, timestamp))
                conn.commit()
                print(f"Inserted barcode: {barcodedata} at {timestamp}")
            else:
                print(f"Duplicate barcode scan detected: {barcodedata} at {timestamp}")

            # Draw a rectangle around the barcode
            (x, y, w, h) = barcode.rect
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

            # Put the barcode data and timestamp on the frame
            cv2.putText(frame, f"{barcodedata} {timestamp}", (x, y - 10), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

        # Display the resulting frame
        cv2.imshow('Barcode Scanner', frame)

        # Exit if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the camera and close windows
    cap.release()
    cv2.destroyAllWindows()

    # Close the database connection
    cursor.close()
    conn.close()

if __name__ == "__main__":
    main()
